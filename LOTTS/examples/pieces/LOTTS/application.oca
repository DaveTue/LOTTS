Service Name: BeerService
Component_manager:

    sensor Thermocouple -> [(JSON) Temp_cool_wat (C)]

    model yeast_groth_prediction ((float) T_wort (K)) -> [(float) T_wort (K)]:
        config:
            mass = 1000 (kg)
            othermass = 600 (m)
   
   model alcohol_prediction  ((float) T_amb (K),(float) T_wort (K) ) -> [(float) T_wort (K),(float) C_y_OH (mol ml^-1)]:
        config ((JSON) C_y0 (kg)):
            mass = 1000 (kg)
            othermass = 600 (m)

    global -> None:
        mass = 1000 (kg)
        delta = 90 (m)
        mass = 1000 (kg)
        delta = 90 (m)

    sensor Tilt_hydrometer ->   [(JSON) Temp_wort (K), (JSON) Sg (-)]

    ux User_Interface -> [(JSON) C_y0 (kg), (JSON) Start_service (-)]

Communication_manager:
    split k_const_split (([float,float]) K_consts ([s^-1,s^-1])) ->  [(float) k_y (s^-1), (float) k_1 (s^-1)]

    aggregate C_y_aggr ((float) C_yMon (mol ml^-1), (float) C_y_OH (mol ml^-1)) -> [([float,float]) C_y ([mol ml^-1,mol ml^-1])]

    duplicate C_y_dup ((float) C_y (mol ml^-1)) -> [(float) C_yMon (mol ml^-1), (float) C_y_OH (mol ml^-1)]

    connect Sen_Temp_DataProcess (src:Tilt_hydrometer.Temp_wort,dst:Sensor_data.T_wort) -> LIFO


    switch steeringangle_switch ((float) steering_angleSen (-), (float) steering_angle_model (-)) -> [(float) steering_angle (-)]:
        def:
            if Cornering_state == True:
                steering_angle =  steering_angleSen 
            else:
                steering_angle =  steering_angle_model 

    switch Twort_switch ((float) T_wort_sen (K), (float) T_wort_model (K)) -> [(float) T_wort (K)]:
        def:
            if T_wort_connector.empty(): 
                T_worth =  T_wort_model 
            else:
                T_worth = T_wort_sens
    
    transform windvector_transform ((float) wind_speed (m s^-1), ([float,float,float]) wind_direction ([-,-,-]))-> [([float,float,float])  wind_vector ([m s^-1,m s^-1,m s^-1])]:
        def:
            wind_vector[1] = wind_direction[1] * wind_speed
            wind_vector[2] = wind_direction[2] * wind_speed
            wind_vector[3] = wind_direction[3] * wind_speed
    
    transform Force_transform ((float) ay_trailer (m s^-2), (float) Fy_wind (N)) -> [(float) Fy_total (N)]:
        def:
            m_trailer = 5000
            Fy_total = Fy_wind + ay_trailer * m_trailer

Execution_manager:

    source Data_process (sensor_data) -> time_specific: 
        trigger ->  guard.start: 
            global_variables.start_service == true 
        def: freq = 30 (min) 

    source sensors_execution (Anemometer, sensor_data) -> streaming:    
        trigger -> guard.start:
            global_variables.start_service == true   
    
    sink  outputShow (monitor_quality, monitor-flavours) -> time_specific:
        trigger -> guard.start:
            global_variables.start_service == True   
        def:
            freq = 30 (min)
    
    cosim Time-sync(Yeast_groth_prediction, Thermodynamics, Fusel-alcohols, Esters)-> time_based:
        trigger-> temporal.start:
            freq = 30 (min)
        config:
            exe_time = FTRT
            t_ini = global.variables.clock
            t_step = 10 (min)
            t_period = 30 (min)

